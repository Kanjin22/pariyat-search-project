[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "get_current_buddhist_year",
        "kind": 2,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "def get_current_buddhist_year():\n    # (ฟังก์ชันนี้สมบูรณ์แบบอยู่แล้ว ไม่ต้องแก้ไข)\n    today = datetime.now()\n    buddhist_year = today.year + 543\n    if today < datetime(today.year, 6, 1):\n        buddhist_year -= 1\n    thai_digits = str.maketrans('0123456789', '๐๑๒๓๔๕๖๗๘๙')\n    return str(buddhist_year).translate(thai_digits)\ndef load_data():\n    global df",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "def load_data():\n    global df\n    print(f\"--- [INFO] Attempting to load data from: {DATA_FILE}\")\n    try:\n        df = pd.read_csv(DATA_FILE)\n        df = df.astype(str)\n        print(f\"--- [SUCCESS] Data loaded successfully. Records: {len(df)}\")\n    except FileNotFoundError:\n        df = pd.DataFrame()\n        print(f\"--- [CRITICAL ERROR] FileNotFoundError! Could not find: {DATA_FILE}\")",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "get_data_timestamp",
        "kind": 2,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "def get_data_timestamp():\n    try:\n        utc_timestamp = os.path.getmtime(DATA_FILE)\n        utc_datetime = datetime.fromtimestamp(utc_timestamp, tz=pytz.utc)\n        bangkok_tz = pytz.timezone(\"Asia/Bangkok\")\n        bangkok_datetime = utc_datetime.astimezone(bangkok_tz)\n        return bangkok_datetime.strftime('%d/%m/%Y %H:%M:%S')\n    except FileNotFoundError:\n        return \"ยังไม่มีข้อมูล\"\n@app.route('/')",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "def index():\n    current_year = get_current_buddhist_year()\n    return render_template('index.html', current_buddhist_year=current_year)\n# (ฟังก์ชัน /get_data_info และ /search เหมือนเดิม ไม่ต้องแก้ไข)\n@app.route('/get_data_info')\ndef get_data_info():\n    return jsonify({'timestamp': get_data_timestamp(), 'count': len(df) if df is not None else 0})\n@app.route('/search')\ndef search():\n    query = request.args.get('q', '')",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "get_data_info",
        "kind": 2,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "def get_data_info():\n    return jsonify({'timestamp': get_data_timestamp(), 'count': len(df) if df is not None else 0})\n@app.route('/search')\ndef search():\n    query = request.args.get('q', '')\n    if df is None or df.empty or query == '': return jsonify([])\n    results_df = df[df['full_name'].str.contains(query, case=False, na=False)]\n    if results_df.empty: return jsonify([])\n    grouped = results_df.groupby('full_name')\n    final_results = []",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "def search():\n    query = request.args.get('q', '')\n    if df is None or df.empty or query == '': return jsonify([])\n    results_df = df[df['full_name'].str.contains(query, case=False, na=False)]\n    if results_df.empty: return jsonify([])\n    grouped = results_df.groupby('full_name')\n    final_results = []\n    for name, group in grouped:\n        person_data = {\n            'name': name, 'age_pansa': group['age_pansa'].iloc[0],",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# สร้าง Path ไปยังโฟลเดอร์ย่อยต่างๆ โดยอิงจาก BASE_DIR\nTEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')\nSTATIC_DIR = os.path.join(BASE_DIR, 'app', 'static') # Static ยังคงอยู่ที่เดิม\nDATA_FILE = os.path.join(BASE_DIR, 'data', 'pariyat_applicants_data.csv')\n# --- จุดแก้ไขที่ 2: ตั้งค่า Flask ให้รู้จัก Path ใหม่ทั้งหมด ---\napp = Flask(__name__, \n            template_folder=TEMPLATE_DIR,\n            static_folder=STATIC_DIR)\ndf = None",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_DIR",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')\nSTATIC_DIR = os.path.join(BASE_DIR, 'app', 'static') # Static ยังคงอยู่ที่เดิม\nDATA_FILE = os.path.join(BASE_DIR, 'data', 'pariyat_applicants_data.csv')\n# --- จุดแก้ไขที่ 2: ตั้งค่า Flask ให้รู้จัก Path ใหม่ทั้งหมด ---\napp = Flask(__name__, \n            template_folder=TEMPLATE_DIR,\n            static_folder=STATIC_DIR)\ndf = None\ndef get_current_buddhist_year():\n    # (ฟังก์ชันนี้สมบูรณ์แบบอยู่แล้ว ไม่ต้องแก้ไข)",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "STATIC_DIR",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "STATIC_DIR = os.path.join(BASE_DIR, 'app', 'static') # Static ยังคงอยู่ที่เดิม\nDATA_FILE = os.path.join(BASE_DIR, 'data', 'pariyat_applicants_data.csv')\n# --- จุดแก้ไขที่ 2: ตั้งค่า Flask ให้รู้จัก Path ใหม่ทั้งหมด ---\napp = Flask(__name__, \n            template_folder=TEMPLATE_DIR,\n            static_folder=STATIC_DIR)\ndf = None\ndef get_current_buddhist_year():\n    # (ฟังก์ชันนี้สมบูรณ์แบบอยู่แล้ว ไม่ต้องแก้ไข)\n    today = datetime.now()",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "DATA_FILE",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "DATA_FILE = os.path.join(BASE_DIR, 'data', 'pariyat_applicants_data.csv')\n# --- จุดแก้ไขที่ 2: ตั้งค่า Flask ให้รู้จัก Path ใหม่ทั้งหมด ---\napp = Flask(__name__, \n            template_folder=TEMPLATE_DIR,\n            static_folder=STATIC_DIR)\ndf = None\ndef get_current_buddhist_year():\n    # (ฟังก์ชันนี้สมบูรณ์แบบอยู่แล้ว ไม่ต้องแก้ไข)\n    today = datetime.now()\n    buddhist_year = today.year + 543",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "app = Flask(__name__, \n            template_folder=TEMPLATE_DIR,\n            static_folder=STATIC_DIR)\ndf = None\ndef get_current_buddhist_year():\n    # (ฟังก์ชันนี้สมบูรณ์แบบอยู่แล้ว ไม่ต้องแก้ไข)\n    today = datetime.now()\n    buddhist_year = today.year + 543\n    if today < datetime(today.year, 6, 1):\n        buddhist_year -= 1",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "df = None\ndef get_current_buddhist_year():\n    # (ฟังก์ชันนี้สมบูรณ์แบบอยู่แล้ว ไม่ต้องแก้ไข)\n    today = datetime.now()\n    buddhist_year = today.year + 543\n    if today < datetime(today.year, 6, 1):\n        buddhist_year -= 1\n    thai_digits = str.maketrans('0123456789', '๐๑๒๓๔๕๖๗๘๙')\n    return str(buddhist_year).translate(thai_digits)\ndef load_data():",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "URL_TO_DEBUG",
        "kind": 5,
        "importPath": "scraper.debug_scraper",
        "description": "scraper.debug_scraper",
        "peekOfCode": "URL_TO_DEBUG = \"https://app.pariyat.com/pages/postx/namelist.php?lid=5015\"\nHEADERS = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n}\nprint(f\"กำลังเริ่มชันสูตร URL: {URL_TO_DEBUG}\")\ntry:\n    response = requests.get(URL_TO_DEBUG, headers=HEADERS)\n    response.raise_for_status()\n    with open(\"debug_page.html\", \"wb\") as f: \n        f.write(response.content)",
        "detail": "scraper.debug_scraper",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "kind": 5,
        "importPath": "scraper.debug_scraper",
        "description": "scraper.debug_scraper",
        "peekOfCode": "HEADERS = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n}\nprint(f\"กำลังเริ่มชันสูตร URL: {URL_TO_DEBUG}\")\ntry:\n    response = requests.get(URL_TO_DEBUG, headers=HEADERS)\n    response.raise_for_status()\n    with open(\"debug_page.html\", \"wb\") as f: \n        f.write(response.content)\n    print(\"\\n✅ ชันสูตรสำเร็จ!\")",
        "detail": "scraper.debug_scraper",
        "documentation": {}
    },
    {
        "label": "find_class_name",
        "kind": 2,
        "importPath": "scraper.scraper",
        "description": "scraper.scraper",
        "peekOfCode": "def find_class_name(soup):\n    raw_text = \"\"\n    tag = soup.find('h1', class_='post-title')\n    if tag:\n        raw_text = tag.text.strip()\n    elif (tag := soup.find('h3')) and tag.find('span', class_='alternate'):\n        clone = tag\n        if clone.span:\n            clone.span.decompose()\n        raw_text = clone.text.strip()",
        "detail": "scraper.scraper",
        "documentation": {}
    },
    {
        "label": "scrape_applicant_data_from_url",
        "kind": 2,
        "importPath": "scraper.scraper",
        "description": "scraper.scraper",
        "peekOfCode": "def scrape_applicant_data_from_url(class_url):\n    try:\n        response = requests.get(class_url, headers=HEADERS)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.content, 'html.parser')\n        class_name = find_class_name(soup)\n        if class_name == \"ไม่พบชื่อชั้นเรียน\":\n            print(f\"!!! คำเตือน: ไม่พบแท็กชื่อชั้นเรียนใน URL -> {class_url}\")\n        applicants = []\n        table = soup.find('table', class_='tbl_bordered') or soup.find('table')",
        "detail": "scraper.scraper",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scraper.scraper",
        "description": "scraper.scraper",
        "peekOfCode": "def main():\n    try:\n        with open(INPUT_LINKS_FILE, 'r', encoding='utf-8') as f:\n            class_links = [line.strip() for line in f if line.strip()]\n        print(f\"พบทั้งหมด {len(class_links)} ลิงก์จากไฟล์ {INPUT_LINKS_FILE}\")\n    except FileNotFoundError:\n        print(f\"!!! ไม่พบไฟล์ {INPUT_LINKS_FILE} !!!\")\n        return\n    all_applicants_data = []\n    total_links = len(class_links)",
        "detail": "scraper.scraper",
        "documentation": {}
    },
    {
        "label": "INPUT_LINKS_FILE",
        "kind": 5,
        "importPath": "scraper.scraper",
        "description": "scraper.scraper",
        "peekOfCode": "INPUT_LINKS_FILE = \"class_links.txt\"\nOUTPUT_CSV_FILE = \"../data/pariyat_applicants_data.csv\"\nHEADERS = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n}\ndef find_class_name(soup):\n    raw_text = \"\"\n    tag = soup.find('h1', class_='post-title')\n    if tag:\n        raw_text = tag.text.strip()",
        "detail": "scraper.scraper",
        "documentation": {}
    },
    {
        "label": "OUTPUT_CSV_FILE",
        "kind": 5,
        "importPath": "scraper.scraper",
        "description": "scraper.scraper",
        "peekOfCode": "OUTPUT_CSV_FILE = \"../data/pariyat_applicants_data.csv\"\nHEADERS = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n}\ndef find_class_name(soup):\n    raw_text = \"\"\n    tag = soup.find('h1', class_='post-title')\n    if tag:\n        raw_text = tag.text.strip()\n    elif (tag := soup.find('h3')) and tag.find('span', class_='alternate'):",
        "detail": "scraper.scraper",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "kind": 5,
        "importPath": "scraper.scraper",
        "description": "scraper.scraper",
        "peekOfCode": "HEADERS = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n}\ndef find_class_name(soup):\n    raw_text = \"\"\n    tag = soup.find('h1', class_='post-title')\n    if tag:\n        raw_text = tag.text.strip()\n    elif (tag := soup.find('h3')) and tag.find('span', class_='alternate'):\n        clone = tag",
        "detail": "scraper.scraper",
        "documentation": {}
    },
    {
        "label": "stream_command_output",
        "kind": 2,
        "importPath": "dashboard",
        "description": "dashboard",
        "peekOfCode": "def stream_command_output(command, working_dir):\n    \"\"\"ฟังก์ชันกลางสำหรับรันคำสั่งและ Stream ผลลัพธ์กลับไป\"\"\"\n    try:\n        process = subprocess.Popen(\n            command, cwd=working_dir, stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT, text=True,\n            encoding=sys.stdout.encoding or 'utf-8', errors='ignore', bufsize=1\n        )\n        for line in process.stdout:\n            yield f\"data: {line.strip()}\\n\\n\"",
        "detail": "dashboard",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "dashboard",
        "description": "dashboard",
        "peekOfCode": "def index():\n    return render_template('dashboard.html')\n@app.route('/run-scraper-stream')\ndef run_scraper_stream():\n    def generate():\n        command = [sys.executable, SCRAPER_SCRIPT]\n        returncode = yield from stream_command_output(command, SCRAPER_DIR)\n        if returncode == 0:\n            yield \"data: \\n\"\n            yield \"data: ✅ ดึงข้อมูลสำเร็จ! คุณสามารถไปขั้นตอนที่ 2 ได้\\n\\n\"",
        "detail": "dashboard",
        "documentation": {}
    },
    {
        "label": "run_scraper_stream",
        "kind": 2,
        "importPath": "dashboard",
        "description": "dashboard",
        "peekOfCode": "def run_scraper_stream():\n    def generate():\n        command = [sys.executable, SCRAPER_SCRIPT]\n        returncode = yield from stream_command_output(command, SCRAPER_DIR)\n        if returncode == 0:\n            yield \"data: \\n\"\n            yield \"data: ✅ ดึงข้อมูลสำเร็จ! คุณสามารถไปขั้นตอนที่ 2 ได้\\n\\n\"\n        else:\n            yield \"data: \\n\"\n            yield f\"data: ❌ เกิดข้อผิดพลาด! โปรแกรมจบการทำงานด้วยรหัส: {returncode}\\n\\n\"",
        "detail": "dashboard",
        "documentation": {}
    },
    {
        "label": "git_push_stream",
        "kind": 2,
        "importPath": "dashboard",
        "description": "dashboard",
        "peekOfCode": "def git_push_stream():\n    commit_message = request.json.get('message', 'Automated update via Dashboard')\n    def generate():\n        yield \"data: --- [1/3] กำลังรัน git add . ---\\n\\n\"\n        returncode = yield from stream_command_output(['git', 'add', '.'], PROJECT_ROOT)\n        if returncode != 0:\n            yield f\"data: ❌ git add ล้มเหลว (รหัส: {returncode})\\n\\n\"\n            return\n        yield \"data: \\n--- [2/3] กำลังรัน git commit ---\\n\\n\"\n        process = subprocess.Popen(",
        "detail": "dashboard",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "dashboard",
        "description": "dashboard",
        "peekOfCode": "app = Flask(__name__)\nPROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\nSCRAPER_SCRIPT = os.path.join(PROJECT_ROOT, 'scraper', 'scraper.py')\nSCRAPER_DIR = os.path.join(PROJECT_ROOT, 'scraper')\ndef stream_command_output(command, working_dir):\n    \"\"\"ฟังก์ชันกลางสำหรับรันคำสั่งและ Stream ผลลัพธ์กลับไป\"\"\"\n    try:\n        process = subprocess.Popen(\n            command, cwd=working_dir, stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT, text=True,",
        "detail": "dashboard",
        "documentation": {}
    },
    {
        "label": "PROJECT_ROOT",
        "kind": 5,
        "importPath": "dashboard",
        "description": "dashboard",
        "peekOfCode": "PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\nSCRAPER_SCRIPT = os.path.join(PROJECT_ROOT, 'scraper', 'scraper.py')\nSCRAPER_DIR = os.path.join(PROJECT_ROOT, 'scraper')\ndef stream_command_output(command, working_dir):\n    \"\"\"ฟังก์ชันกลางสำหรับรันคำสั่งและ Stream ผลลัพธ์กลับไป\"\"\"\n    try:\n        process = subprocess.Popen(\n            command, cwd=working_dir, stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT, text=True,\n            encoding=sys.stdout.encoding or 'utf-8', errors='ignore', bufsize=1",
        "detail": "dashboard",
        "documentation": {}
    },
    {
        "label": "SCRAPER_SCRIPT",
        "kind": 5,
        "importPath": "dashboard",
        "description": "dashboard",
        "peekOfCode": "SCRAPER_SCRIPT = os.path.join(PROJECT_ROOT, 'scraper', 'scraper.py')\nSCRAPER_DIR = os.path.join(PROJECT_ROOT, 'scraper')\ndef stream_command_output(command, working_dir):\n    \"\"\"ฟังก์ชันกลางสำหรับรันคำสั่งและ Stream ผลลัพธ์กลับไป\"\"\"\n    try:\n        process = subprocess.Popen(\n            command, cwd=working_dir, stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT, text=True,\n            encoding=sys.stdout.encoding or 'utf-8', errors='ignore', bufsize=1\n        )",
        "detail": "dashboard",
        "documentation": {}
    },
    {
        "label": "SCRAPER_DIR",
        "kind": 5,
        "importPath": "dashboard",
        "description": "dashboard",
        "peekOfCode": "SCRAPER_DIR = os.path.join(PROJECT_ROOT, 'scraper')\ndef stream_command_output(command, working_dir):\n    \"\"\"ฟังก์ชันกลางสำหรับรันคำสั่งและ Stream ผลลัพธ์กลับไป\"\"\"\n    try:\n        process = subprocess.Popen(\n            command, cwd=working_dir, stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT, text=True,\n            encoding=sys.stdout.encoding or 'utf-8', errors='ignore', bufsize=1\n        )\n        for line in process.stdout:",
        "detail": "dashboard",
        "documentation": {}
    }
]